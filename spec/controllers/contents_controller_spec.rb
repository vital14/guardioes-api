require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ContentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:app) do
    {
      app_name: Faker::Company.name,
      owner_country: Faker::Address.country
    }
  end
  let (:group_manager) do
    {
      id: 1

    }
  end
  let (:group) do
    {
      id: 1,
      group_manager_id: group_manager.id

    }
  end
  let (:group_no_adm) do
    {
      id: 1,

    }
  end
  let(:user_with_group) do
    {
      email: Faker::Internet.email,
      password: "12345678",
      user_name: Faker::Name.name,
      birthdate: Faker::Date.birthday(18, 65),
      country: Faker::Address.country ,
      gender: Faker::Gender.type,
      race: "human" ,
      is_professional: false ,
      app: app,
      group_id: group.id
    }
  end
  let(:user_with_group_no_adm) do
    {
      email: Faker::Internet.email,
      password: "12345678",
      user_name: Faker::Name.name,
      birthdate: Faker::Date.birthday(18, 65),
      country: Faker::Address.country ,
      gender: Faker::Gender.type,
      race: "human" ,
      is_professional: false ,
      app: app,
      group_id: group_no_adm.id
    }
  end
  let(:user_without_group) do
    {
      email: Faker::Internet.email,
      password: "12345678",
      user_name: Faker::Name.name,
      birthdate: Faker::Date.birthday(18, 65),
      country: Faker::Address.country ,
      gender: Faker::Gender.type,
      race: "human" ,
      is_professional: false ,
      app: app,
    }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    context 'given an user without group' do
      it 'returns a success response' do
        contents = Content.where(app_id: @user.app_id).where(group_manager_id: nil)
        get :index, params: {user_without_group}, session: valid_session
        expect(response).to eq(contents)
      end
    end
    context 'given an user with a group without admin' do
      it 'returns a success response' do
        contents = Content.where(app_id: @user.app_id).where(group_manager_id: nil)
        get :index, params: {user_with_group_no_adm}, session: valid_session
        expect(response).to eq(contents)
      end
    end
    context 'given an user with a group with admin' do
      it 'returns a success response' do
        contents = Content.where(app_id: @user.app_id).where(group_manager_id: nil)
        get :index, params: {user_with_group}, session: valid_session
        expect(response).to eq(contents)
      end
    end
  end

end